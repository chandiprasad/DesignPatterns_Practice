package com.mockito.tests;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.atMost;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

import java.util.LinkedList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InOrder;



public class MockitoTest {

	@SuppressWarnings("rawtypes")
	private List mockedList;

	@SuppressWarnings("unchecked")
	@Before
	public void setUp() throws Exception {
		
		//mock creation
		mockedList = mock(List.class);
		
		//using mock object
		mockedList.add("one");
		
		//when(mockedList.get(0)).thenReturn("first");
		//when(mockedList.get(1)).thenThrow(new RuntimeException());
		//when(mockedList.get(anyInt())).thenReturn("element");
		//verify(mockedList).get(anyInt());
		

	}
	
	@Test
	public void test1() {
		 assertEquals(null, mockedList.get(0) );
	}
	
	@SuppressWarnings("unchecked")
	@Test
	public void test2() {
		assertEquals(false, verify(mockedList).add("one") );
		//assertThat(Arrays.asList("one"), CoreMatchers.hasItems("one"));
	}	
	@SuppressWarnings("unchecked")
	@Test
	public void test3(){
		
		mockedList.add("twice");
		mockedList.add("twice");
		
		mockedList.add("three times");
		mockedList.add("three times");
		mockedList.add("three times");
		
		//exact number of invocations verification
		verify(mockedList, times(2)).add("twice");
		verify(mockedList, times(3)).add("three times");
		//verification using never(). never() is an alias to times(0)
		verify(mockedList, never()).add("never happened");
		
		
		mockedList.add("five times");
		mockedList.add("five times");
		mockedList.add("five times");
		mockedList.add("five times");
		mockedList.add("five times");
		mockedList.add("five times");
		
		
		//verification using atLeast()/atMost()
		verify(mockedList, atLeastOnce()).add("three times");
		verify(mockedList, atLeast(2)).add("five times");
		verify(mockedList, atMost(5)).add("three times");
	}
	@SuppressWarnings("unchecked")
	@Test
	public void test4(){
		List singleMock = mock(List.class);
		//using a single mock
		singleMock.add("was added first");
		singleMock.add("was added second");
		//create an inOrder verifier for a single mock
		InOrder inOrder = inOrder(singleMock);
		//following will make sure that add is first called with "was added first,
		//then with "was added second"
		inOrder.verify(singleMock).add("was added first");
		inOrder.verify(singleMock).add("was added second");
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Test
	public void test5(){
		List list = new LinkedList();
		List spy = spy(list); //Creates a spy of the real object. The spy calls real methods unless they are stubbed. 

		//optionally, you can stub out some methods:
		when(spy.size()).thenReturn(100);

		//using the spy calls *real* methods
		spy.add("one");
		spy.add("two");

		//prints "one" - the first element of a list
		System.out.println(spy.get(0));

		//size() method was stubbed - 100 is printed
		System.out.println(spy.size());

		//optionally, you can verify
		verify(spy).add("one");
		verify(spy).add("two");
		System.out.println(verify(spy).add("one"));
	}
	
}
